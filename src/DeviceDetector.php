<?php

namespace WebAuthn;

class DeviceDetector
{
    private string $userAgent;

    public function __construct(string $userAgent = null)
    {
        $this->userAgent = $userAgent ?? $_SERVER['HTTP_USER_AGENT'] ?? '';
    }

    public function isMobileDevice(): bool
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∏–æ–º–µ—Ç—Ä–∏–∏
        $mobilePatterns = [
            // iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            '/iPhone/',
            '/iPad/',
            '/iPod/',
            
            // Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            '/Android.*Mobile/',
            '/Android.*Tablet/',
            
            // Windows Mobile
            '/Windows Phone/',
            '/Windows Mobile/',
            
            // –î—Ä—É–≥–∏–µ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            '/BlackBerry/',
            '/webOS/',
            '/Opera Mini/',
            '/IEMobile/'
        ];

        foreach ($mobilePatterns as $pattern) {
            if (preg_match($pattern, $this->userAgent)) {
                return true;
            }
        }

        return false;
    }

    public function supportsWebAuthn(): bool
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebAuthn –ø–æ User Agent
        // WebAuthn –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
        
        // Chrome 67+, Firefox 60+, Safari 14+, Edge 18+
        if (preg_match('/Chrome\/(\d+)/', $this->userAgent, $matches)) {
            return (int)$matches[1] >= 67;
        }
        
        if (preg_match('/Firefox\/(\d+)/', $this->userAgent, $matches)) {
            return (int)$matches[1] >= 60;
        }
        
        if (preg_match('/Safari\/(\d+)/', $this->userAgent, $matches)) {
            // Safari –ø–æ–¥–¥–µ—Ä–∂–∫–∞ WebAuthn –Ω–∞—á–∏–Ω–∞—è —Å iOS 14 –∏ macOS Big Sur
            return preg_match('/Version\/(1[4-9]|[2-9]\d)/', $this->userAgent);
        }
        
        if (preg_match('/Edge\/(\d+)/', $this->userAgent, $matches)) {
            return (int)$matches[1] >= 18;
        }

        // –î–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
        return true;
    }

    public function hasBiometricSupport(): bool
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        if (!$this->isMobileDevice()) {
            return false;
        }

        // iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å Touch ID / Face ID
        if (preg_match('/iPhone|iPad|iPod/', $this->userAgent)) {
            // Touch ID –ø–æ—è–≤–∏–ª—Å—è –≤ iPhone 5s (iOS 7+)
            // Face ID –ø–æ—è–≤–∏–ª—Å—è –≤ iPhone X (iOS 11+)
            return true;
        }

        // Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –æ—Ç–ø–µ—á–∞—Ç–∫–∞–º–∏ –ø–∞–ª—å—Ü–µ–≤
        if (preg_match('/Android/', $this->userAgent)) {
            // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –±–∏–æ–º–µ—Ç—Ä–∏—é
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Android (6.0+ –¥–ª—è Fingerprint API)
            if (preg_match('/Android (\d+)\.(\d+)/', $this->userAgent, $matches)) {
                $majorVersion = (int)$matches[1];
                return $majorVersion >= 6;
            }
            return true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
        }

        return false;
    }

    public function getDeviceInfo(): array
    {
        $isMobile = $this->isMobileDevice();
        $supportsWebAuthn = $this->supportsWebAuthn();
        $hasBiometric = $this->hasBiometricSupport();

        return [
            'isMobile' => $isMobile,
            'supportsWebAuthn' => $supportsWebAuthn,
            'hasBiometricSupport' => $hasBiometric,
            'isCompatible' => $isMobile && $supportsWebAuthn && $hasBiometric,
            'userAgent' => $this->userAgent,
            'deviceType' => $this->getDeviceType(),
            'browserName' => $this->getBrowserName()
        ];
    }

    private function getDeviceType(): string
    {
        if (preg_match('/iPhone/', $this->userAgent)) {
            return 'iPhone';
        }
        if (preg_match('/iPad/', $this->userAgent)) {
            return 'iPad';
        }
        if (preg_match('/iPod/', $this->userAgent)) {
            return 'iPod';
        }
        if (preg_match('/Android.*Mobile/', $this->userAgent)) {
            return 'Android Phone';
        }
        if (preg_match('/Android.*Tablet/', $this->userAgent)) {
            return 'Android Tablet';
        }
        if (preg_match('/Android/', $this->userAgent)) {
            return 'Android Device';
        }
        
        return 'Unknown';
    }

    private function getBrowserName(): string
    {
        if (preg_match('/Chrome/', $this->userAgent)) {
            return 'Chrome';
        }
        if (preg_match('/Firefox/', $this->userAgent)) {
            return 'Firefox';
        }
        if (preg_match('/Safari/', $this->userAgent) && !preg_match('/Chrome/', $this->userAgent)) {
            return 'Safari';
        }
        if (preg_match('/Edge/', $this->userAgent)) {
            return 'Edge';
        }
        
        return 'Unknown';
    }

    public static function blockNonMobileDevices(): void
    {
        $detector = new self();
        $deviceInfo = $detector->getDeviceInfo();

        if (!$deviceInfo['isCompatible']) {
            http_response_code(403);
            
            $errorMessage = '';
            if (!$deviceInfo['isMobile']) {
                $errorMessage = '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤';
            } elseif (!$deviceInfo['supportsWebAuthn']) {
                $errorMessage = '–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WebAuthn';
            } elseif (!$deviceInfo['hasBiometricSupport']) {
                $errorMessage = '–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é';
            }

            $html = '<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-align: center;
            padding: 20px;
        }
        .container {
            max-width: 400px;
            padding: 40px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
        }
        p {
            font-size: 16px;
            line-height: 1.6;
            margin-bottom: 20px;
        }
        .device-info {
            font-size: 12px;
            opacity: 0.7;
            margin-top: 30px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
        <p>' . htmlspecialchars($errorMessage) . '</p>
        <p>–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.</p>
        <div class="device-info">
            –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ' . htmlspecialchars($deviceInfo['deviceType']) . '<br>
            –ë—Ä–∞—É–∑–µ—Ä: ' . htmlspecialchars($deviceInfo['browserName']) . '<br>
            –ü–æ–¥–¥–µ—Ä–∂–∫–∞ WebAuthn: ' . ($deviceInfo['supportsWebAuthn'] ? '–î–∞' : '–ù–µ—Ç') . '<br>
            –ë–∏–æ–º–µ—Ç—Ä–∏—è: ' . ($deviceInfo['hasBiometricSupport'] ? '–î–∞' : '–ù–µ—Ç') . '
        </div>
    </div>
</body>
</html>';
            
            echo $html;
            exit;
        }
    }
}
