<?php
/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ WebAuthnHelper
 * –ü—Ä–æ–≤–µ—Ä—è—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å WebAuthn —É—Ç–∏–ª–∏—Ç
 */

require_once __DIR__ . '/../src/WebAuthnHelper.php';

use WebAuthn\WebAuthnHelper;

class WebAuthnHelperTest
{
    private array $testResults = [];
    
    public function __construct()
    {
        echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ WebAuthnHelper –∫–ª–∞—Å—Å–∞...\n\n";
        $this->runAllTests();
        $this->printResults();
    }
    
    private function runAllTests(): void
    {
        $this->testBase64urlEncodeDecode();
        $this->testBase64urlEncodeDecodeEdgeCases();
        $this->testBase64urlDecodeInvalidInput();
        $this->testGenerateChallenge();
        $this->testChallengeUniqueness();
        $this->testCreateRegistrationOptions();
        $this->testCreateRegistrationOptionsWithCredentials();
        $this->testCreateAuthenticationOptions();
        $this->testCreateAuthenticationOptionsEmpty();
        $this->testVerifyChallenge();
        $this->testVerifyChallengeInvalid();
        $this->testVerifyChallengeMalformedJSON();
        $this->testGenerateUserFromDevice();
        $this->testGenerateUserFromDeviceConsistency();
        $this->testEnvironmentVariables();
        $this->testSpecialCharacters();
        $this->testLargeDataHandling();
    }
    
    private function testBase64urlEncodeDecode(): void
    {
        $testData = [
            'Hello World!',
            'Test string with special chars: !@#$%^&*()',
            '–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç',
            json_encode(['key' => 'value', 'number' => 123]),
            str_repeat('A', 100), // –°—Ä–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            '', // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            "\x00\x01\x02\x03", // –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        ];
        
        foreach ($testData as $index => $original) {
            try {
                $encoded = WebAuthnHelper::base64urlEncode($original);
                $decoded = WebAuthnHelper::base64urlDecode($encoded);
                
                if ($decoded === $original) {
                    $this->pass("Base64url encode/decode $index", "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                } else {
                    $this->fail("Base64url encode/decode $index", "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è");
                }
            } catch (Exception $e) {
                $this->fail("Base64url encode/decode $index", "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏: " . $e->getMessage());
            }
        }
    }
    
    private function testBase64urlEncodeDecodeEdgeCases(): void
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ base64url –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç +, /, =
        $testString = 'Test string that will produce + and / in regular base64??>>';
        $encoded = WebAuthnHelper::base64urlEncode($testString);
        
        if (strpos($encoded, '+') === false && strpos($encoded, '/') === false && strpos($encoded, '=') === false) {
            $this->pass("Base64url format", "Base64url –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤");
        } else {
            $this->fail("Base64url format", "Base64url —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: $encoded");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ–±—ã—á–Ω—ã–º base64
        $regularBase64 = base64_encode($testString);
        $convertedToUrl = str_replace(['+', '/'], ['-', '_'], rtrim($regularBase64, '='));
        
        if ($encoded === $convertedToUrl) {
            $this->pass("Base64url compatibility", "Base64url —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –æ–±—ã—á–Ω—ã–º base64");
        } else {
            $this->fail("Base64url compatibility", "Base64url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –æ–±—ã—á–Ω—ã–º base64");
        }
    }
    
    private function testBase64urlDecodeInvalidInput(): void
    {
        $invalidInputs = [
            'Contains invalid chars: +/',
            'Too short',
            '!!!invalid!!!'
        ];
        
        foreach ($invalidInputs as $index => $invalidInput) {
            try {
                $result = WebAuthnHelper::base64urlDecode($invalidInput);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑—É–º–Ω—ã–π
                if (is_string($result)) {
                    $this->pass("Invalid base64url $index", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞");
                } else {
                    $this->fail("Invalid base64url $index", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É");
                }
            } catch (Exception $e) {
                $this->pass("Invalid base64url $index", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ");
            }
        }
    }
    
    private function testGenerateChallenge(): void
    {
        $challenge = WebAuthnHelper::generateChallenge();
        
        if (is_string($challenge) && strlen($challenge) === 32) {
            $this->pass("Generate challenge", "Challenge —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (32 –±–∞–π—Ç–∞)");
        } else {
            $this->fail("Generate challenge", "Challenge –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª–∏–Ω–æ–π 32 –±–∞–π—Ç–∞, –ø–æ–ª—É—á–µ–Ω: " . strlen($challenge));
        }
    }
    
    private function testChallengeUniqueness(): void
    {
        $challenges = [];
        $iterations = 100;
        
        for ($i = 0; $i < $iterations; $i++) {
            $challenges[] = WebAuthnHelper::generateChallenge();
        }
        
        $uniqueChallenges = array_unique($challenges, SORT_REGULAR);
        
        if (count($uniqueChallenges) === $iterations) {
            $this->pass("Challenge uniqueness", "–í—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ challenge —É–Ω–∏–∫–∞–ª—å–Ω—ã");
        } else {
            $duplicates = $iterations - count($uniqueChallenges);
            $this->fail("Challenge uniqueness", "–ù–∞–π–¥–µ–Ω–æ $duplicates –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ $iterations challenge");
        }
    }
    
    private function testCreateRegistrationOptions(): void
    {
        $userId = 'test_user_123';
        $userHandle = 'test_handle_data';
        
        $options = WebAuthnHelper::createRegistrationOptions($userId, $userHandle);
        
        $requiredFields = ['rp', 'user', 'challenge', 'pubKeyCredParams', 'timeout', 'excludeCredentials', 'authenticatorSelection', 'attestation'];
        
        $allFieldsPresent = true;
        foreach ($requiredFields as $field) {
            if (!isset($options[$field])) {
                $allFieldsPresent = false;
                break;
            }
        }
        
        if ($allFieldsPresent && 
            isset($options['rp']['name']) && 
            isset($options['user']['id']) && 
            strlen($options['challenge']) > 0) {
            $this->pass("Registration options structure", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è");
        } else {
            $this->fail("Registration options structure", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º authenticatorSelection
        if ($options['authenticatorSelection']['authenticatorAttachment'] === 'platform' &&
            $options['authenticatorSelection']['userVerification'] === 'required') {
            $this->pass("Registration authenticator selection", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");
        } else {
            $this->fail("Registration authenticator selection", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");
        }
    }
    
    private function testCreateRegistrationOptionsWithCredentials(): void
    {
        $excludeCredentials = [
            ['type' => 'public-key', 'id' => 'credential1'],
            ['type' => 'public-key', 'id' => 'credential2']
        ];
        
        $options = WebAuthnHelper::createRegistrationOptions('user', 'handle', $excludeCredentials);
        
        if ($options['excludeCredentials'] === $excludeCredentials) {
            $this->pass("Registration exclude credentials", "–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        } else {
            $this->fail("Registration exclude credentials", "–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        }
    }
    
    private function testCreateAuthenticationOptions(): void
    {
        $allowCredentials = [
            ['type' => 'public-key', 'id' => 'credential1'],
            ['type' => 'public-key', 'id' => 'credential2']
        ];
        
        $options = WebAuthnHelper::createAuthenticationOptions($allowCredentials);
        
        $requiredFields = ['challenge', 'timeout', 'allowCredentials', 'userVerification'];
        
        $allFieldsPresent = true;
        foreach ($requiredFields as $field) {
            if (!isset($options[$field])) {
                $allFieldsPresent = false;
                break;
            }
        }
        
        if ($allFieldsPresent && 
            $options['allowCredentials'] === $allowCredentials &&
            $options['userVerification'] === 'required') {
            $this->pass("Authentication options", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        } else {
            $this->fail("Authentication options", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è");
        }
    }
    
    private function testCreateAuthenticationOptionsEmpty(): void
    {
        $options = WebAuthnHelper::createAuthenticationOptions([]);
        
        if (isset($options['allowCredentials']) && is_array($options['allowCredentials']) && empty($options['allowCredentials'])) {
            $this->pass("Authentication empty credentials", "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        } else {
            $this->fail("Authentication empty credentials", "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        }
    }
    
    private function testVerifyChallenge(): void
    {
        $challenge = WebAuthnHelper::base64urlEncode(random_bytes(32));
        $clientData = [
            'type' => 'webauthn.create',
            'challenge' => $challenge,
            'origin' => 'https://example.com'
        ];
        
        $clientDataJSON = WebAuthnHelper::base64urlEncode(json_encode($clientData));
        
        $result = WebAuthnHelper::verifyChallenge($clientDataJSON, $challenge);
        
        if ($result === true) {
            $this->pass("Verify challenge valid", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π challenge –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É");
        } else {
            $this->fail("Verify challenge valid", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π challenge –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É");
        }
    }
    
    private function testVerifyChallengeInvalid(): void
    {
        $challenge = WebAuthnHelper::base64urlEncode(random_bytes(32));
        $wrongChallenge = WebAuthnHelper::base64urlEncode(random_bytes(32));
        
        $clientData = [
            'type' => 'webauthn.create',
            'challenge' => $wrongChallenge,
            'origin' => 'https://example.com'
        ];
        
        $clientDataJSON = WebAuthnHelper::base64urlEncode(json_encode($clientData));
        
        $result = WebAuthnHelper::verifyChallenge($clientDataJSON, $challenge);
        
        if ($result === false) {
            $this->pass("Verify challenge invalid", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π challenge –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É");
        } else {
            $this->fail("Verify challenge invalid", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π challenge –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É");
        }
    }
    
    private function testVerifyChallengeMalformedJSON(): void
    {
        $challenge = WebAuthnHelper::base64urlEncode(random_bytes(32));
        $malformedJSON = WebAuthnHelper::base64urlEncode('{"invalid": json}');
        
        $result = WebAuthnHelper::verifyChallenge($malformedJSON, $challenge);
        
        if ($result === false) {
            $this->pass("Verify challenge malformed", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É");
        } else {
            $this->fail("Verify challenge malformed", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É");
        }
        
        // –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª–µ–º challenge
        $clientDataWithoutChallenge = ['type' => 'webauthn.create'];
        $jsonWithoutChallenge = WebAuthnHelper::base64urlEncode(json_encode($clientDataWithoutChallenge));
        
        $result2 = WebAuthnHelper::verifyChallenge($jsonWithoutChallenge, $challenge);
        
        if ($result2 === false) {
            $this->pass("Verify challenge missing field", "JSON –±–µ–∑ –ø–æ–ª—è challenge –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É");
        } else {
            $this->fail("Verify challenge missing field", "JSON –±–µ–∑ –ø–æ–ª—è challenge –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É");
        }
    }
    
    private function testGenerateUserFromDevice(): void
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º hex —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        $deviceId = 'abcdef1234567890abcdef1234567890'; // 32 hex —Å–∏–º–≤–æ–ª–∞
        
        try {
            $userData = WebAuthnHelper::generateUserFromDevice($deviceId);
            
            if (isset($userData['userId']) && isset($userData['userHandle']) &&
                strlen($userData['userId']) === 16 &&
                is_string($userData['userHandle'])) {
                $this->pass("Generate user from device", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑ device ID");
            } else {
                $this->fail("Generate user from device", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑ device ID");
            }
        } catch (Exception $e) {
            $this->fail("Generate user from device", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " . $e->getMessage());
        }
    }
    
    private function testGenerateUserFromDeviceConsistency(): void
    {
        $deviceId = 'abcdef1234567890abcdef1234567890';
        
        try {
            $userData1 = WebAuthnHelper::generateUserFromDevice($deviceId);
            $userData2 = WebAuthnHelper::generateUserFromDevice($deviceId);
            
            if ($userData1['userId'] === $userData2['userId'] && 
                $userData1['userHandle'] === $userData2['userHandle']) {
                $this->pass("Generate user consistency", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ device ID");
            } else {
                $this->fail("Generate user consistency", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ device ID");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ device ID –¥–∞—é—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            $differentDeviceId = '1234567890abcdef1234567890abcdef';
            $userData3 = WebAuthnHelper::generateUserFromDevice($differentDeviceId);
            
            if ($userData1['userId'] !== $userData3['userId']) {
                $this->pass("Generate user uniqueness", "–†–∞–∑–Ω—ã–µ device ID –¥–∞—é—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            } else {
                $this->fail("Generate user uniqueness", "–†–∞–∑–Ω—ã–µ device ID –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            }
        } catch (Exception $e) {
            $this->fail("Generate user consistency", "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: " . $e->getMessage());
        }
    }
    
    private function testEnvironmentVariables(): void
    {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        $originalRpName = $_ENV['WEBAUTHN_RP_NAME'] ?? null;
        $originalRpId = $_ENV['WEBAUTHN_RP_ID'] ?? null;
        $originalHttpHost = $_SERVER['HTTP_HOST'] ?? null;
        
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            $_ENV['WEBAUTHN_RP_NAME'] = 'Test App';
            $_ENV['WEBAUTHN_RP_ID'] = 'test.example.com';
            
            $options = WebAuthnHelper::createRegistrationOptions('user', 'handle');
            
            if ($options['rp']['name'] === 'Test App' && $options['rp']['id'] === 'test.example.com') {
                $this->pass("Environment variables", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                $this->fail("Environment variables", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ HTTP_HOST
            unset($_ENV['WEBAUTHN_RP_ID']);
            $_SERVER['HTTP_HOST'] = 'fallback.example.com';
            
            $options2 = WebAuthnHelper::createRegistrationOptions('user', 'handle');
            
            if ($options2['rp']['id'] === 'fallback.example.com') {
                $this->pass("Environment fallback", "Fallback –Ω–∞ HTTP_HOST —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                $this->fail("Environment fallback", "Fallback –Ω–∞ HTTP_HOST –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if ($originalRpName !== null) {
                $_ENV['WEBAUTHN_RP_NAME'] = $originalRpName;
            } else {
                unset($_ENV['WEBAUTHN_RP_NAME']);
            }
            
            if ($originalRpId !== null) {
                $_ENV['WEBAUTHN_RP_ID'] = $originalRpId;
            } else {
                unset($_ENV['WEBAUTHN_RP_ID']);
            }
            
            if ($originalHttpHost !== null) {
                $_SERVER['HTTP_HOST'] = $originalHttpHost;
            } else {
                unset($_SERVER['HTTP_HOST']);
            }
        }
    }
    
    private function testSpecialCharacters(): void
    {
        $specialInputs = [
            'unicode' => '–¢–µ—Å—Ç —Å —é–Ω–∏–∫–æ–¥–æ–º: √±√°√©√≠√≥√∫',
            'html' => '<script>alert("xss")</script>',
            'sql' => "'; DROP TABLE users; --",
            'quotes' => 'test "double" and \'single\' quotes',
            'backslashes' => 'test\\with\\backslashes'
        ];
        
        foreach ($specialInputs as $type => $input) {
            try {
                $encoded = WebAuthnHelper::base64urlEncode($input);
                $decoded = WebAuthnHelper::base64urlDecode($encoded);
                
                if ($decoded === $input) {
                    $this->pass("Special chars $type", "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ($type) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                } else {
                    $this->fail("Special chars $type", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ ($type)");
                }
            } catch (Exception $e) {
                $this->fail("Special chars $type", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ $type: " . $e->getMessage());
            }
        }
    }
    
    private function testLargeDataHandling(): void
    {
        try {
            // –¢–µ—Å—Ç —Å –±–æ–ª—å—à–æ–π —Å—Ç—Ä–æ–∫–æ–π
            $largeString = str_repeat('A', 10000); // 10KB —Å—Ç—Ä–æ–∫–∞
            
            $encoded = WebAuthnHelper::base64urlEncode($largeString);
            $decoded = WebAuthnHelper::base64urlDecode($encoded);
            
            if ($decoded === $largeString) {
                $this->pass("Large data encoding", "–ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–¥–∏—Ä—É—é—Ç—Å—è –∏ –¥–µ–∫–æ–¥–∏—Ä—É—é—Ç—Å—è");
            } else {
                $this->fail("Large data encoding", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö");
            }
            
            // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö challenge
            $challenges = [];
            for ($i = 0; $i < 100; $i++) {
                $challenges[] = WebAuthnHelper::generateChallenge();
            }
            
            if (count($challenges) === 100) {
                $this->pass("Multiple challenges", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è challenge —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                $this->fail("Multiple challenges", "–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ challenge");
            }
            
        } catch (Exception $e) {
            $this->fail("Large data handling", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
        }
    }
    
    private function pass(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'PASS',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚úÖ {$testName}: {$message}\n";
    }
    
    private function fail(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'FAIL',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚ùå {$testName}: {$message}\n";
    }
    
    private function printResults(): void
    {
        $passed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'PASS'));
        $failed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'FAIL'));
        $total = count($this->testResults);
        
        echo "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebAuthnHelper:\n";
        echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {$passed}\n";
        echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$failed}\n";
        echo "üìù –í—Å–µ–≥–æ: {$total}\n";
        
        if ($failed > 0) {
            echo "\n‚ùå –¢–ï–°–¢–´ WebAuthnHelper –ù–ï –ü–†–û–ô–î–ï–ù–´!\n";
            exit(1);
        } else {
            echo "\nüéâ –í–°–ï –¢–ï–°–¢–´ WebAuthnHelper –ü–†–û–ô–î–ï–ù–´!\n";
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
new WebAuthnHelperTest();
