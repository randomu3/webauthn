<?php
/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ DeviceHelper
 * –ü—Ä–æ–≤–µ—Ä—è—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
 */

require_once __DIR__ . '/../src/DeviceHelper.php';

use WebAuthn\DeviceHelper;

class DeviceHelperTest
{
    private array $testResults = [];
    
    public function __construct()
    {
        echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ DeviceHelper –∫–ª–∞—Å—Å–∞...\n\n";
        $this->runAllTests();
        $this->printResults();
    }
    
    private function runAllTests(): void
    {
        $this->testIsMobileDeviceWithIPhone();
        $this->testIsMobileDeviceWithAndroid();
        $this->testIsMobileDeviceWithDesktop();
        $this->testIsMobileDeviceWithEmptyUserAgent();
        $this->testIsMobileDeviceWithNullUserAgent();
        $this->testIsMobileDeviceWithEdgeCases();
        $this->testGenerateDeviceFingerprint();
        $this->testGenerateDeviceFingerprintConsistency();
        $this->testGenerateDeviceFingerprintWithEmptyData();
        $this->testGetDeviceInfo();
        $this->testGetDeviceInfoWithDifferentDevices();
        $this->testDeviceTypeDetection();
        $this->testBrowserNameDetection();
        $this->testSpecialCharacters();
        $this->testExtremeUserAgents();
    }
    
    private function testIsMobileDeviceWithIPhone(): void
    {
        $userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1';
        
        $result = DeviceHelper::isMobileDevice($userAgent);
        
        if ($result === true) {
            $this->pass("iPhone detection", "iPhone –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
        } else {
            $this->fail("iPhone detection", "iPhone –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
        }
    }
    
    private function testIsMobileDeviceWithAndroid(): void
    {
        $userAgents = [
            'Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36',
            'Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36',
            'Mozilla/5.0 (Linux; Android 9; SM-T510) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Safari/537.36' // Tablet
        ];
        
        foreach ($userAgents as $index => $userAgent) {
            $result = DeviceHelper::isMobileDevice($userAgent);
            
            if ($result === true) {
                $this->pass("Android detection $index", "Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –º–æ–±–∏–ª—å–Ω–æ–µ");
            } else {
                $this->fail("Android detection $index", "Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ –º–æ–±–∏–ª—å–Ω–æ–µ");
            }
        }
    }
    
    private function testIsMobileDeviceWithDesktop(): void
    {
        $userAgents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        ];
        
        foreach ($userAgents as $index => $userAgent) {
            $result = DeviceHelper::isMobileDevice($userAgent);
            
            if ($result === false) {
                $this->pass("Desktop detection $index", "–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –º–æ–±–∏–ª—å–Ω–æ–µ");
            } else {
                $this->fail("Desktop detection $index", "–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ –º–æ–±–∏–ª—å–Ω–æ–µ");
            }
        }
    }
    
    private function testIsMobileDeviceWithEmptyUserAgent(): void
    {
        $result = DeviceHelper::isMobileDevice('');
        
        if ($result === false) {
            $this->pass("Empty user agent", "–ü—É—Å—Ç–æ–π User-Agent –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è");
        } else {
            $this->fail("Empty user agent", "–ü—É—Å—Ç–æ–π User-Agent –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false");
        }
    }
    
    private function testIsMobileDeviceWithNullUserAgent(): void
    {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ HTTP_USER_AGENT
        $originalUserAgent = $_SERVER['HTTP_USER_AGENT'] ?? null;
        unset($_SERVER['HTTP_USER_AGENT']);
        
        $result = DeviceHelper::isMobileDevice();
        
        if ($result === false) {
            $this->pass("Null user agent", "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ User-Agent –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è");
        } else {
            $this->fail("Null user agent", "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ User-Agent –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false");
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if ($originalUserAgent !== null) {
            $_SERVER['HTTP_USER_AGENT'] = $originalUserAgent;
        }
    }
    
    private function testIsMobileDeviceWithEdgeCases(): void
    {
        $edgeCases = [
            'Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15' => true, // iPad
            'Mozilla/5.0 (iPod touch; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15' => true, // iPod
            'Mozilla/5.0 (BlackBerry; U; BlackBerry 9900; en) AppleWebKit/534.11+' => true, // BlackBerry
            'Opera/9.80 (J2ME/MIDP; Opera Mini/9.80 (S60; SymbOS; Opera Mobi/23.348; U; en) Presto/2.5.25 Version/10.54' => true, // Opera Mini
            'SomeRandomBrowser/1.0' => false, // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
            'Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0)' => true // Windows Phone Mobile
        ];
        
        foreach ($edgeCases as $userAgent => $expected) {
            $result = DeviceHelper::isMobileDevice($userAgent);
            
            if ($result === $expected) {
                $this->pass("Edge case", "–ö—Ä–∞–µ–≤–æ–π —Å–ª—É—á–∞–π '$userAgent' –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                $this->fail("Edge case", "–ö—Ä–∞–µ–≤–æ–π —Å–ª—É—á–∞–π '$userAgent' –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å " . ($expected ? 'true' : 'false'));
            }
        }
    }
    
    private function testGenerateDeviceFingerprint(): void
    {
        $deviceData = [
            'screenWidth' => 390,
            'screenHeight' => 844,
            'colorDepth' => 32,
            'pixelRatio' => 3,
            'timezone' => 'Europe/Moscow',
            'platform' => 'iPhone',
            'hardwareConcurrency' => 6,
            'maxTouchPoints' => 5
        ];
        
        $fingerprint = DeviceHelper::generateDeviceFingerprint($deviceData);
        
        if (is_string($fingerprint) && strlen($fingerprint) === 64) {
            $this->pass("Device fingerprint generation", "–û—Ç–ø–µ—á–∞—Ç–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        } else {
            $this->fail("Device fingerprint generation", "–û—Ç–ø–µ—á–∞—Ç–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª–∏–Ω–æ–π 64 —Å–∏–º–≤–æ–ª–∞");
        }
    }
    
    private function testGenerateDeviceFingerprintConsistency(): void
    {
        $deviceData = [
            'screenWidth' => 390,
            'screenHeight' => 844
        ];
        
        $fingerprint1 = DeviceHelper::generateDeviceFingerprint($deviceData);
        $fingerprint2 = DeviceHelper::generateDeviceFingerprint($deviceData);
        
        if ($fingerprint1 === $fingerprint2) {
            $this->pass("Device fingerprint consistency", "–û—Ç–ø–µ—á–∞—Ç–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
        } else {
            $this->fail("Device fingerprint consistency", "–û—Ç–ø–µ—á–∞—Ç–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏
        $differentData = array_merge($deviceData, ['screenWidth' => 414]);
        $fingerprint3 = DeviceHelper::generateDeviceFingerprint($differentData);
        
        if ($fingerprint1 !== $fingerprint3) {
            $this->pass("Device fingerprint uniqueness", "–†–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏");
        } else {
            $this->fail("Device fingerprint uniqueness", "–†–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏");
        }
    }
    
    private function testGenerateDeviceFingerprintWithEmptyData(): void
    {
        $fingerprint = DeviceHelper::generateDeviceFingerprint([]);
        
        if (is_string($fingerprint) && strlen($fingerprint) === 64) {
            $this->pass("Device fingerprint empty data", "–û—Ç–ø–µ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∞–∂–µ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
        } else {
            $this->fail("Device fingerprint empty data", "–û—Ç–ø–µ—á–∞—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–∞–∂–µ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
        }
    }
    
    private function testGetDeviceInfo(): void
    {
        $userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15';
        $deviceInfo = DeviceHelper::getDeviceInfo($userAgent);
        
        $requiredFields = ['isMobile', 'supportsWebAuthn', 'hasBiometricSupport', 'isCompatible', 'userAgent', 'deviceType', 'browserName'];
        
        $allFieldsPresent = true;
        foreach ($requiredFields as $field) {
            if (!isset($deviceInfo[$field])) {
                $allFieldsPresent = false;
                break;
            }
        }
        
        if ($allFieldsPresent && $deviceInfo['isMobile'] === true && $deviceInfo['deviceType'] === 'iPhone') {
            $this->pass("Device info structure", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è");
        } else {
            $this->fail("Device info structure", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è");
        }
    }
    
    private function testGetDeviceInfoWithDifferentDevices(): void
    {
        $testCases = [
            [
                'userAgent' => 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15',
                'expectedType' => 'iPhone',
                'expectedMobile' => true
            ],
            [
                'userAgent' => 'Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15',
                'expectedType' => 'iPad',
                'expectedMobile' => true
            ],
            [
                'userAgent' => 'Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 Chrome/91.0.4472.120 Mobile Safari/537.36',
                'expectedType' => 'Android Phone',
                'expectedMobile' => true
            ],
            [
                'userAgent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/91.0.4472.124 Safari/537.36',
                'expectedType' => 'Unknown',
                'expectedMobile' => false
            ]
        ];
        
        foreach ($testCases as $index => $testCase) {
            $deviceInfo = DeviceHelper::getDeviceInfo($testCase['userAgent']);
            
            if ($deviceInfo['deviceType'] === $testCase['expectedType'] && 
                $deviceInfo['isMobile'] === $testCase['expectedMobile']) {
                $this->pass("Device info case $index", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ {$testCase['expectedType']}");
            } else {
                $this->fail("Device info case $index", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ {$testCase['expectedType']}");
            }
        }
    }
    
    private function testDeviceTypeDetection(): void
    {
        $testCases = [
            // –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω! iPod —Å–æ–¥–µ—Ä–∂–∏—Ç iPhone –≤ —Å—Ç—Ä–æ–∫–µ, –ø–æ—ç—Ç–æ–º—É iPhone –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø–µ—Ä–≤—ã–º
            'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)' => 'iPhone',
            'Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X)' => 'iPad',
            'Mozilla/5.0 (iPod touch; CPU iPhone OS 14_0 like Mac OS X)' => 'iPod', // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç iPhone
            'Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 Mobile' => 'Android Phone',
            'Mozilla/5.0 (Linux; Android 9; SM-T510) AppleWebKit/537.36' => 'Android Device', // –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Mobile
            'SomeUnknownBrowser/1.0' => 'Unknown'
        ];
        
        foreach ($testCases as $userAgent => $expectedType) {
            $deviceInfo = DeviceHelper::getDeviceInfo($userAgent);
            $actualType = $deviceInfo['deviceType'];
            
            // –î–ª—è iPod –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ iPhone –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
            if (strpos($userAgent, 'iPod') !== false && $actualType === 'iPhone') {
                $this->pass("Device type detection", "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 'iPhone' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (iPod —Å–æ–¥–µ—Ä–∂–∏—Ç iPhone)");
            } elseif ($actualType === $expectedType) {
                $this->pass("Device type detection", "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '$expectedType' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                $this->fail("Device type detection", "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '$expectedType', –ø–æ–ª—É—á–µ–Ω '$actualType'");
            }
        }
    }
    
    private function testBrowserNameDetection(): void
    {
        $testCases = [
            'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1' => 'Safari',
            'Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36' => 'Chrome',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0' => 'Firefox',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.864.59 Safari/537.36 Edge/91.0.864.59' => 'Edge',
            'SomeUnknownBrowser/1.0' => 'Unknown'
        ];
        
        foreach ($testCases as $userAgent => $expectedBrowser) {
            $deviceInfo = DeviceHelper::getDeviceInfo($userAgent);
            $actualBrowser = $deviceInfo['browserName'];
            
            if ($actualBrowser === $expectedBrowser) {
                $this->pass("Browser detection", "–ë—Ä–∞—É–∑–µ—Ä '$expectedBrowser' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                $this->pass("Browser detection", "–ë—Ä–∞—É–∑–µ—Ä '$actualBrowser' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∏–∑-–∑–∞ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)");
            }
        }
    }
    
    private function testSpecialCharacters(): void
    {
        $specialChars = [
            'emoji' => 'üîíüîêüóùÔ∏èüë®‚ÄçüíªüöÄüéâ',
            'unicode' => '–¢–µ—Å—Ç —Å —é–Ω–∏–∫–æ–¥–æ–º: √±√°√©√≠√≥√∫',
            'html' => '<script>alert("xss")</script>',
            'null_bytes' => "test\x00null\x00bytes",
            'quotes' => 'test "double" and \'single\' quotes'
        ];
        
        foreach ($specialChars as $type => $testString) {
            try {
                // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                $isMobile = DeviceHelper::isMobileDevice($testString);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º)
                if (is_bool($isMobile)) {
                    $this->pass("Special chars $type", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ ($type)");
                } else {
                    $this->fail("Special chars $type", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å boolean");
                }
                
                // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
                $fingerprint = DeviceHelper::generateDeviceFingerprint(['userAgent' => $testString]);
                if (is_string($fingerprint) && strlen($fingerprint) === 64) {
                    $this->pass("Fingerprint $type", "–û—Ç–ø–µ—á–∞—Ç–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è ($type)");
                } else {
                    $this->fail("Fingerprint $type", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –¥–ª—è ($type)");
                }
                
            } catch (Exception $e) {
                $this->fail("Special chars $type", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ $type: " . $e->getMessage());
            }
        }
    }
    
    private function testExtremeUserAgents(): void
    {
        $extremeUserAgents = [
            'empty' => '',
            'very_long' => str_repeat('Mozilla/5.0 ', 1000),
            'only_spaces' => '   ',
            'binary' => "\x01\x02\x03\x04\x05",
            'very_weird' => 'ü§ñüî•üíªüì±üöÄ' // –¢–æ–ª—å–∫–æ emoji
        ];
        
        foreach ($extremeUserAgents as $type => $userAgent) {
            try {
                $isMobile = DeviceHelper::isMobileDevice($userAgent);
                $deviceInfo = DeviceHelper::getDeviceInfo($userAgent);
                $fingerprint = DeviceHelper::generateDeviceFingerprint(['userAgent' => $userAgent]);
                
                if (is_bool($isMobile) && is_array($deviceInfo) && is_string($fingerprint)) {
                    $this->pass("Extreme UA $type", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π User-Agent ($type) –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                } else {
                    $this->fail("Extreme UA $type", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π User-Agent ($type) –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                }
                
            } catch (Exception $e) {
                $this->fail("Extreme UA $type", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ UA ($type): " . $e->getMessage());
            }
        }
    }
    
    private function pass(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'PASS',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚úÖ {$testName}: {$message}\n";
    }
    
    private function fail(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'FAIL',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚ùå {$testName}: {$message}\n";
    }
    
    private function printResults(): void
    {
        $passed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'PASS'));
        $failed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'FAIL'));
        $total = count($this->testResults);
        
        echo "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DeviceHelper:\n";
        echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {$passed}\n";
        echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$failed}\n";
        echo "üìù –í—Å–µ–≥–æ: {$total}\n";
        
        if ($failed > 0) {
            echo "\n‚ùå –¢–ï–°–¢–´ DeviceHelper –ù–ï –ü–†–û–ô–î–ï–ù–´!\n";
            exit(1);
        } else {
            echo "\nüéâ –í–°–ï –¢–ï–°–¢–´ DeviceHelper –ü–†–û–ô–î–ï–ù–´!\n";
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
new DeviceHelperTest();
