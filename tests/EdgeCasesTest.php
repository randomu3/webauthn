<?php
/**
 * –¢–µ—Å—Ç—ã –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤ –∏ –æ—à–∏–±–æ–∫
 * –ü—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
 */

require_once __DIR__ . '/../src/Database.php';
require_once __DIR__ . '/../src/DeviceHelper.php';
require_once __DIR__ . '/../src/WebAuthnHelper.php';
require_once __DIR__ . '/../src/SessionManager.php';

use WebAuthn\Database;
use WebAuthn\DeviceHelper;
use WebAuthn\WebAuthnHelper;
use WebAuthn\SessionManager;

class EdgeCasesTest
{
    private array $testResults = [];
    
    public function __construct()
    {
        echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤...\n\n";
        $this->runAllTests();
        $this->printResults();
    }
    
    private function runAllTests(): void
    {
        $this->testDatabaseConnectionFailure();
        $this->testLargeDataHandling();
        $this->testSpecialCharacters();
        $this->testConcurrentSessions();
        $this->testInvalidInputHandling();
        $this->testDatabaseTransactionFailures();
        $this->testExtremeUserAgents();
        $this->testMaliciousInputs();
        $this->testResourceExhaustion();
        $this->testEncodingIssues();
        $this->testTimestampEdgeCases();
        $this->testMemoryAndPerformance();
    }
    
    private function testDatabaseConnectionFailure(): void
    {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î —á–µ—Ä–µ–∑ –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        $originalEnv = [
            'DB_HOST' => $_ENV['DB_HOST'] ?? null,
            'DB_NAME' => $_ENV['DB_NAME'] ?? null,
            'DB_USER' => $_ENV['DB_USER'] ?? null,
            'DB_PASS' => $_ENV['DB_PASS'] ?? null,
        ];
        
        try {
            $_ENV['DB_HOST'] = 'nonexistent_host';
            $_ENV['DB_NAME'] = 'nonexistent_db';
            $_ENV['DB_USER'] = 'nonexistent_user';
            $_ENV['DB_PASS'] = 'wrong_password';
            
            try {
                $db = new Database();
                $this->fail("Database connection failure", "–î–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ë–î");
            } catch (Exception $e) {
                if (strpos($e->getMessage(), 'Database connection failed') !== false) {
                    $this->pass("Database connection failure", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î");
                } else {
                    $this->fail("Database connection failure", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: " . $e->getMessage());
                }
            }
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            foreach ($originalEnv as $key => $value) {
                if ($value !== null) {
                    $_ENV[$key] = $value;
                } else {
                    unset($_ENV[$key]);
                }
            }
        }
    }
    
    private function testLargeDataHandling(): void
    {
        try {
            // –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            $largeString = str_repeat('A', 50000); // 50KB —Å—Ç—Ä–æ–∫–∞
            $veryLargeString = str_repeat('–ë', 100000); // 100KB —Å—Ç—Ä–æ–∫–∞ —Å UTF-8
            
            $encoded = WebAuthnHelper::base64urlEncode($largeString);
            $decoded = WebAuthnHelper::base64urlDecode($encoded);
            
            if ($decoded === $largeString) {
                $this->pass("Large data encoding", "–ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–¥–∏—Ä—É—é—Ç—Å—è –∏ –¥–µ–∫–æ–¥–∏—Ä—É—é—Ç—Å—è");
            } else {
                $this->fail("Large data encoding", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö");
            }
            
            // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            $deviceData = [
                'userAgent' => $veryLargeString,
                'screenWidth' => 1920,
                'screenHeight' => 1080
            ];
            
            $fingerprint = DeviceHelper::generateDeviceFingerprint($deviceData);
            
            if (strlen($fingerprint) === 64) {
                $this->pass("Large data fingerprint", "–û—Ç–ø–µ—á–∞—Ç–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö");
            } else {
                $this->fail("Large data fingerprint", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö");
            }
            
        } catch (Exception $e) {
            $this->fail("Large data handling", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
        }
    }
    
    private function testSpecialCharacters(): void
    {
        $specialChars = [
            'emoji' => 'üîíüîêüóùÔ∏èüë®‚ÄçüíªüöÄüéâ',
            'unicode' => '–¢–µ—Å—Ç —Å —é–Ω–∏–∫–æ–¥–æ–º: √±√°√©√≠√≥√∫',
            'html' => '<script>alert("xss")</script>',
            'sql' => "'; DROP TABLE users; --",
            'null_bytes' => "test\x00null\x00bytes",
            'control_chars' => "test\r\n\t\v\f",
            'quotes' => 'test "double" and \'single\' quotes',
            'backslashes' => 'test\\with\\backslashes\\and/forward/slashes'
        ];
        
        foreach ($specialChars as $type => $testString) {
            try {
                // –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                $encoded = WebAuthnHelper::base64urlEncode($testString);
                $decoded = WebAuthnHelper::base64urlDecode($encoded);
                
                if ($decoded === $testString) {
                    $this->pass("Special chars $type", "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ($type) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                } else {
                    $this->fail("Special chars $type", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ ($type)");
                }
                
                // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                $isMobile = DeviceHelper::isMobileDevice($testString);
                if (is_bool($isMobile)) {
                    $this->pass("Mobile detection $type", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ ($type)");
                } else {
                    $this->fail("Mobile detection $type", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å boolean");
                }
                
            } catch (Exception $e) {
                $this->fail("Special chars $type", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ $type: " . $e->getMessage());
            }
        }
    }
    
    private function testConcurrentSessions(): void
    {
        try {
            $db = new Database();
            $sessionManager = new SessionManager($db);
            
            $testUserId = 'concurrent_test_' . time();
            $userHandle = random_bytes(32);
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!$db->createUser($testUserId, $userHandle)) {
                $this->fail("Concurrent sessions setup", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±—ã—Å—Ç—Ä–æ
            $sessionIds = [];
            for ($i = 0; $i < 10; $i++) {
                // –û—á–∏—â–∞–µ–º PHP —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                unset($_SESSION['user_id'], $_SESSION['session_id']);
                $sessionId = $sessionManager->createSession($testUserId);
                $sessionIds[] = $sessionId;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ—Å—Å–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
            $uniqueSessions = array_unique($sessionIds);
            
            if (count($uniqueSessions) === count($sessionIds)) {
                $this->pass("Concurrent sessions", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ID");
            } else {
                $this->fail("Concurrent sessions", "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã ID –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π");
            }
            
            // –û—á–∏—Å—Ç–∫–∞
            $pdo = $db->getPdo();
            $stmt = $pdo->prepare("DELETE FROM users WHERE user_id = ?");
            $stmt->execute([$testUserId]);
            
        } catch (Exception $e) {
            $this->fail("Concurrent sessions", "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: " . $e->getMessage());
        }
    }
    
    private function testInvalidInputHandling(): void
    {
        $invalidInputs = [
            'null' => null,
            'boolean_true' => true,
            'boolean_false' => false,
            'integer' => 12345,
            'float' => 123.45,
            'array' => ['key' => 'value'],
            'object' => (object)['key' => 'value']
        ];
        
        foreach ($invalidInputs as $type => $input) {
            try {
                // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
                if (is_array($input)) {
                    $stringInput = json_encode($input);
                } elseif (is_object($input)) {
                    $stringInput = json_encode($input);
                } elseif (is_null($input)) {
                    $stringInput = '';
                } else {
                    $stringInput = (string)$input;
                }
                
                $isMobile = DeviceHelper::isMobileDevice($stringInput);
                
                if (is_bool($isMobile)) {
                    $this->pass("Invalid input $type", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ ($type) –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–µ–∑ –æ—à–∏–±–∫–∏");
                } else {
                    $this->fail("Invalid input $type", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ ($type) –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏");
                }
                
            } catch (Exception $e) {
                $this->pass("Invalid input $type", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ ($type) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ");
            }
        }
    }
    
    private function testDatabaseTransactionFailures(): void
    {
        try {
            $db = new Database();
            $pdo = $db->getPdo();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è user_id
            $duplicateUserId = 'duplicate_test_' . time();
            $userHandle1 = random_bytes(32);
            $userHandle2 = random_bytes(32);
            
            // –ü–µ—Ä–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ
            $result1 = $db->createUser($duplicateUserId, $userHandle1);
            
            if ($result1) {
                $this->pass("Database first insert", "–ü–µ—Ä–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ");
                
                // –í—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å false –∏–∑-–∑–∞ UNIQUE constraint
                $result2 = $db->createUser($duplicateUserId, $userHandle2);
                
                if ($result2 === false) {
                    $this->pass("Database duplicate handling", "–î—É–±–ª–∏—Ä—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω");
                } else {
                    $this->fail("Database duplicate handling", "–î—É–±–ª–∏—Ä—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è");
                }
                
                // –û—á–∏—Å—Ç–∫–∞
                $stmt = $pdo->prepare("DELETE FROM users WHERE user_id = ?");
                $stmt->execute([$duplicateUserId]);
                
            } else {
                $this->fail("Database first insert", "–ü–µ—Ä–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å");
            }
            
        } catch (Exception $e) {
            $this->fail("Database transaction failures", "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ë–î: " . $e->getMessage());
        }
    }
    
    private function testExtremeUserAgents(): void
    {
        $extremeUserAgents = [
            'empty' => '',
            'very_long' => str_repeat('Mozilla/5.0 ', 500),
            'only_spaces' => '   ',
            'only_newlines' => "\n\r\n\r",
            'mixed_case' => 'mOzIlLa/5.0 (iPhOnE; cPu IpHoNe Os 14_0)',
            'with_nulls' => "Mozilla/5.0\x00iPhone\x00",
            'binary' => "\x01\x02\x03\x04\x05",
            'json' => '{"userAgent": "fake"}',
            'xml' => '<userAgent>fake</userAgent>',
            'very_weird' => 'ü§ñüî•üíªüì±üöÄ' // –¢–æ–ª—å–∫–æ emoji
        ];
        
        foreach ($extremeUserAgents as $type => $userAgent) {
            try {
                $isMobile = DeviceHelper::isMobileDevice($userAgent);
                $deviceInfo = DeviceHelper::getDeviceInfo($userAgent);
                $fingerprint = DeviceHelper::generateDeviceFingerprint(['userAgent' => $userAgent]);
                
                if (is_bool($isMobile) && is_array($deviceInfo) && is_string($fingerprint)) {
                    $this->pass("Extreme UA $type", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π User-Agent ($type) –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                } else {
                    $this->fail("Extreme UA $type", "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π User-Agent ($type) –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                }
                
            } catch (Exception $e) {
                $this->fail("Extreme UA $type", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ UA ($type): " . $e->getMessage());
            }
        }
    }
    
    private function testMaliciousInputs(): void
    {
        $maliciousInputs = [
            'xss' => '<script>alert("xss")</script>',
            'sql_injection' => "'; DROP TABLE users; --",
            'path_traversal' => '../../../etc/passwd',
            'null_injection' => "test\x00.php",
            'ldap_injection' => 'admin)(&(password=*))',
            'xxe' => '<?xml version="1.0"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>',
            'command_injection' => '; rm -rf /',
            'format_string' => '%s%s%s%s%s%s%s%s',
            'buffer_overflow' => str_repeat('A', 5000)
        ];
        
        foreach ($maliciousInputs as $type => $maliciousInput) {
            try {
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏
                $encoded = WebAuthnHelper::base64urlEncode($maliciousInput);
                $decoded = WebAuthnHelper::base64urlDecode($encoded);
                $fingerprint = DeviceHelper::generateDeviceFingerprint(['userAgent' => $maliciousInput]);
                
                if ($decoded === $maliciousInput && strlen($fingerprint) === 64) {
                    $this->pass("Malicious input $type", "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –≤–≤–æ–¥ ($type) –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
                } else {
                    $this->fail("Malicious input $type", "–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ($type)");
                }
                
            } catch (Exception $e) {
                $this->pass("Malicious input $type", "–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –≤–≤–æ–¥ ($type) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ");
            }
        }
    }
    
    private function testResourceExhaustion(): void
    {
        try {
            // –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ challenge
            $challenges = [];
            for ($i = 0; $i < 500; $i++) {
                $challenges[] = WebAuthnHelper::generateChallenge();
            }
            
            if (count($challenges) === 500 && count(array_unique($challenges, SORT_REGULAR)) === 500) {
                $this->pass("Resource exhaustion challenges", "–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è challenge —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                $this->fail("Resource exhaustion challenges", "–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ challenge");
            }
            
            // –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤
            $fingerprints = [];
            for ($i = 0; $i < 500; $i++) {
                $fingerprints[] = DeviceHelper::generateDeviceFingerprint([
                    'index' => $i,
                    'screenWidth' => 1920 + $i,
                    'screenHeight' => 1080 + $i,
                    'userAgent' => "test_agent_$i"
                ]);
            }
            
            $uniqueFingerprints = count(array_unique($fingerprints));
            if (count($fingerprints) === 500 && $uniqueFingerprints >= 499) { // –î–æ–ø—É—Å–∫–∞–µ–º 1 –¥—É–±–ª–∏–∫–∞—Ç –∏–∑-–∑–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ $_SERVER –¥–∞–Ω–Ω—ã—Ö
                $this->pass("Resource exhaustion fingerprints", "–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ($uniqueFingerprints —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑ 500)");
            } else {
                $this->fail("Resource exhaustion fingerprints", "–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤: $uniqueFingerprints —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑ 500");
            }
            
        } catch (Exception $e) {
            $this->fail("Resource exhaustion", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –∏—Å—Ç–æ—â–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: " . $e->getMessage());
        }
    }
    
    private function testEncodingIssues(): void
    {
        $encodingTests = [
            'utf8' => '–¢–µ—Å—Ç UTF-8: –ü—Ä–∏–≤–µ—Ç –º–∏—Ä! üåç',
            'latin1' => 'Test with √±√°√©√≠√≥√∫',
            'mixed' => 'Mixed: –ü—Ä–∏–≤–µ—Ç + Hello + üöÄ',
            'chinese' => 'ÊµãËØï‰∏≠ÊñáÂ≠óÁ¨¶',
            'arabic' => 'ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÜÿµ ÿßŸÑÿπÿ±ÿ®Ÿä',
            'japanese' => '„ÉÜ„Çπ„Éà„ÉÜ„Ç≠„Çπ„Éà',
            'korean' => 'ÌÖåÏä§Ìä∏ ÌÖçÏä§Ìä∏',
            'emoji_mix' => 'Text with üîíüéâ emojis'
        ];
        
        foreach ($encodingTests as $type => $text) {
            try {
                $encoded = WebAuthnHelper::base64urlEncode($text);
                $decoded = WebAuthnHelper::base64urlDecode($encoded);
                
                if ($decoded === $text) {
                    $this->pass("Encoding $type", "–ö–æ–¥–∏—Ä–æ–≤–∫–∞ ($type) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                } else {
                    $this->fail("Encoding $type", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ ($type)");
                }
                
            } catch (Exception $e) {
                $this->fail("Encoding $type", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ ($type): " . $e->getMessage());
            }
        }
    }
    
    private function testTimestampEdgeCases(): void
    {
        try {
            $db = new Database();
            
            // –¢–µ—Å—Ç —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            $testUserId = 'timestamp_test_' . time();
            $userHandle = random_bytes(32);
            
            if (!$db->createUser($testUserId, $userHandle)) {
                $this->fail("Timestamp test setup", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return;
            }
            
            // –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è
            $sessionId1 = 'future_session_' . time();
            $result1 = $db->createSession($sessionId1, $testUserId, 86400 * 365); // 1 –≥–æ–¥
            
            if ($result1) {
                $this->pass("Timestamp future", "–°–µ—Å—Å–∏—è —Å –¥–∞–ª–µ–∫–∏–º –±—É–¥—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–∑–¥–∞–µ—Ç—Å—è");
            } else {
                $this->fail("Timestamp future", "–°–µ—Å—Å–∏—è —Å –¥–∞–ª–µ–∫–∏–º –±—É–¥—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è");
            }
            
            // –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (—É–∂–µ –∏—Å—Ç–µ–∫—à–∞—è)
            $sessionId2 = 'past_session_' . time();
            $result2 = $db->createSession($sessionId2, $testUserId, -3600);
            
            if ($result2) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ –≤–∞–ª–∏–¥–Ω–∞—è
                $session = $db->getSession($sessionId2);
                if ($session === null) {
                    $this->pass("Timestamp past", "–ò—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è");
                } else {
                    $this->fail("Timestamp past", "–ò—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è");
                }
            } else {
                $this->fail("Timestamp past", "–ò—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ –ë–î");
            }
            
            // –û—á–∏—Å—Ç–∫–∞
            $pdo = $db->getPdo();
            $stmt = $pdo->prepare("DELETE FROM users WHERE user_id = ?");
            $stmt->execute([$testUserId]);
            
        } catch (Exception $e) {
            $this->fail("Timestamp edge cases", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫: " . $e->getMessage());
        }
    }
    
    private function testMemoryAndPerformance(): void
    {
        try {
            // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            $startTime = microtime(true);
            $iterations = 1000;
            
            for ($i = 0; $i < $iterations; $i++) {
                $data = "test_data_$i";
                $encoded = WebAuthnHelper::base64urlEncode($data);
                $decoded = WebAuthnHelper::base64urlDecode($encoded);
            }
            
            $endTime = microtime(true);
            $duration = $endTime - $startTime;
            
            if ($duration < 5.0) { // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥
                $this->pass("Performance encoding", "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø—Ä–∏–µ–º–ª–µ–º–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ($duration —Å–µ–∫)");
            } else {
                $this->fail("Performance encoding", "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ ($duration —Å–µ–∫)");
            }
            
            // –¢–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞–º–∏
            $startTime = microtime(true);
            
            for ($i = 0; $i < 100; $i++) {
                $deviceData = [
                    'userAgent' => "test_agent_$i",
                    'screenWidth' => 1920 + $i,
                    'screenHeight' => 1080 + $i
                ];
                $fingerprint = DeviceHelper::generateDeviceFingerprint($deviceData);
            }
            
            $endTime = microtime(true);
            $duration = $endTime - $startTime;
            
            if ($duration < 2.0) { // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                $this->pass("Performance fingerprints", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø—Ä–∏–µ–º–ª–µ–º–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ($duration —Å–µ–∫)");
            } else {
                $this->fail("Performance fingerprints", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ ($duration —Å–µ–∫)");
            }
            
        } catch (Exception $e) {
            $this->fail("Memory and performance", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: " . $e->getMessage());
        }
    }
    
    private function pass(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'PASS',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚úÖ {$testName}: {$message}\n";
    }
    
    private function fail(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'FAIL',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚ùå {$testName}: {$message}\n";
    }
    
    private function printResults(): void
    {
        $passed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'PASS'));
        $failed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'FAIL'));
        $total = count($this->testResults);
        
        echo "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤:\n";
        echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {$passed}\n";
        echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$failed}\n";
        echo "üìù –í—Å–µ–≥–æ: {$total}\n";
        
        if ($failed > 0) {
            echo "\n‚ùå –¢–ï–°–¢–´ –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í –ù–ï –ü–†–û–ô–î–ï–ù–´!\n";
            exit(1);
        } else {
            echo "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í –ü–†–û–ô–î–ï–ù–´!\n";
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
new EdgeCasesTest();
