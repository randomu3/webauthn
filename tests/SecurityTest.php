<?php
/**
 * Comprehensive —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è WebAuthn –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
 */

require_once __DIR__ . '/../src/Database.php';
require_once __DIR__ . '/../src/WebAuthnSecurity.php';
require_once __DIR__ . '/../src/SecurityHeaders.php';
require_once __DIR__ . '/../src/RateLimiter.php';
require_once __DIR__ . '/../src/RecoveryManager.php';

use WebAuthn\Database;
use WebAuthn\WebAuthnSecurity;
use WebAuthn\SecurityHeaders;
use WebAuthn\RateLimiter;
use WebAuthn\RecoveryManager;

class SecurityTest
{
    private array $testResults = [];
    private Database $db;
    
    public function __construct()
    {
        echo "üõ°Ô∏è –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ WebAuthn...\n\n";
        
        try {
            $this->db = new Database();
        } catch (Exception $e) {
            $this->fail("Database initialization", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: " . $e->getMessage());
            return;
        }
        
        $this->runAllTests();
        $this->printResults();
    }
    
    private function runAllTests(): void
    {
        // WebAuthn Security Tests
        $this->testSecureChallengeGeneration();
        $this->testChallengeValidation();
        $this->testOriginValidation();
        $this->testUserHandleGeneration();
        
        // Rate Limiting Tests
        $this->testRateLimiting();
        $this->testIPBlocking();
        $this->testUserLimiting();
        
        // Recovery Manager Tests
        $this->testRecoveryCodeGeneration();
        $this->testRecoveryCodeVerification();
        $this->testEmergencyTokens();
        
        // Security Headers Tests  
        $this->testSecurityHeaders();
        $this->testHTTPSEnforcement();
        
        // Integration Tests
        $this->testSecurityIntegration();
        $this->testAttackScenarios();
    }
    
    private function testSecureChallengeGeneration(): void
    {
        try {
            // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            $challenge1 = WebAuthnSecurity::generateSecureChallenge(32);
            $challenge2 = WebAuthnSecurity::generateSecureChallenge(32);
            
            if (strlen($challenge1) !== 32) {
                $this->fail("Challenge length", "Challenge –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32 –±–∞–π—Ç–∞");
                return;
            }
            
            if ($challenge1 === $challenge2) {
                $this->fail("Challenge uniqueness", "Challenges –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏");
                return;
            }
            
            // –¢–µ—Å—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏
            $challenges = [];
            for ($i = 0; $i < 100; $i++) {
                $challenges[] = WebAuthnSecurity::generateSecureChallenge(16);
            }
            
            $unique = array_unique($challenges);
            if (count($unique) < 100) {
                $this->fail("Challenge entropy", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è challenge");
                return;
            }
            
            $this->pass("Secure challenge generation", "Challenge –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–µ–π");
            
        } catch (Exception $e) {
            $this->fail("Challenge generation", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testChallengeValidation(): void
    {
        try {
            $challenge = WebAuthnSecurity::generateSecureChallenge(32);
            
            // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ challenge
            if (!WebAuthnSecurity::validateChallenge($challenge, $challenge)) {
                $this->fail("Challenge validation valid", "–í–∞–ª–∏–¥–Ω—ã–π challenge –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É");
                return;
            }
            
            // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ challenge
            $wrongChallenge = WebAuthnSecurity::generateSecureChallenge(32);
            if (WebAuthnSecurity::validateChallenge($wrongChallenge, $challenge)) {
                $this->fail("Challenge validation invalid", "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π challenge –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É");
                return;
            }
            
            // –¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö challenge
            if (WebAuthnSecurity::validateChallenge('', $challenge)) {
                $this->fail("Challenge validation empty", "–ü—É—Å—Ç–æ–π challenge –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É");
                return;
            }
            
            $this->pass("Challenge validation", "–í–∞–ª–∏–¥–∞—Ü–∏—è challenge —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("Challenge validation", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testOriginValidation(): void
    {
        try {
            $allowedOrigins = ['https://example.com', 'https://app.example.com'];
            
            // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ origin
            if (!WebAuthnSecurity::validateOrigin('https://example.com', $allowedOrigins)) {
                $this->fail("Origin validation valid", "–í–∞–ª–∏–¥–Ω—ã–π origin –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É");
                return;
            }
            
            // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ origin
            if (WebAuthnSecurity::validateOrigin('https://evil.com', $allowedOrigins)) {
                $this->fail("Origin validation invalid", "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π origin –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É");
                return;
            }
            
            // –¢–µ—Å—Ç case sensitivity
            if (WebAuthnSecurity::validateOrigin('HTTPS://EXAMPLE.COM', $allowedOrigins)) {
                $this->pass("Origin validation case", "Case-insensitive –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");
            } else {
                $this->fail("Origin validation case", "Case-insensitive –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
                return;
            }
            
            $this->pass("Origin validation", "–í–∞–ª–∏–¥–∞—Ü–∏—è origin —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("Origin validation", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testUserHandleGeneration(): void
    {
        try {
            $handle1 = WebAuthnSecurity::generateUserHandle();
            $handle2 = WebAuthnSecurity::generateUserHandle();
            
            if (strlen($handle1) !== 16) {
                $this->fail("User handle length", "User handle –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 16 –±–∞–π—Ç");
                return;
            }
            
            if ($handle1 === $handle2) {
                $this->fail("User handle uniqueness", "User handles –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏");
                return;
            }
            
            $this->pass("User handle generation", "User handles –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("User handle generation", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testRateLimiting(): void
    {
        try {
            $rateLimiter = new RateLimiter($this->db);
            
            // –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º action
            $testAction = 'test-normal-' . time();
            for ($i = 0; $i < 3; $i++) {
                if (!$rateLimiter->checkIPLimit($testAction, 5, 10)) {
                    $this->fail("Rate limiting normal", "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
                    return;
                }
            }
            
            // –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º action
            $limitTestAction = 'test-limit-' . time();
            for ($i = 0; $i < 3; $i++) {
                $rateLimiter->checkIPLimit($limitTestAction, 3, 10);
            }
            
            if ($rateLimiter->checkIPLimit($limitTestAction, 3, 10)) {
                $this->fail("Rate limiting exceeded", "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
                return;
            }
            
            $this->pass("Rate limiting", "Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("Rate limiting", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testIPBlocking(): void
    {
        try {
            $rateLimiter = new RateLimiter($this->db);
            $testIP = '192.168.1.100';
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º IP
            $rateLimiter->blockIP($testIP, 5, 'Test blocking');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            if (!$rateLimiter->isIPBlocked($testIP)) {
                $this->fail("IP blocking", "IP –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
                return;
            }
            
            $this->pass("IP blocking", "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("IP blocking", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testUserLimiting(): void
    {
        try {
            $rateLimiter = new RateLimiter($this->db);
            $testUserId = 'test-user-' . time();
            
            // –¢–µ—Å—Ç user –ª–∏–º–∏—Ç–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º action
            $userAction = 'test-user-action-' . time();
            for ($i = 0; $i < 2; $i++) {
                if (!$rateLimiter->checkUserLimit($testUserId, $userAction, 3, 10)) {
                    $this->fail("User rate limiting normal", "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
                    return;
                }
            }
            
            // –ü—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º action
            $userLimitAction = 'test-user-limit-' . time();
            for ($i = 0; $i < 2; $i++) {
                $rateLimiter->checkUserLimit($testUserId, $userLimitAction, 2, 10);
            }
            
            if ($rateLimiter->checkUserLimit($testUserId, $userLimitAction, 2, 10)) {
                $this->fail("User rate limiting exceeded", "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
                return;
            }
            
            $this->pass("User rate limiting", "User rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("User rate limiting", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testRecoveryCodeGeneration(): void
    {
        try {
            $recoveryManager = new RecoveryManager($this->db);
            $testUserId = 'test-recovery-user';
            
            $codes = $recoveryManager->generateRecoveryCodes($testUserId, 5);
            
            if (count($codes) !== 5) {
                $this->fail("Recovery codes count", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤");
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–æ–≤
            foreach ($codes as $code) {
                if (!preg_match('/^[2-9A-Z]{4}-[2-9A-Z]{4}$/', $code)) {
                    $this->fail("Recovery code format", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç recovery –∫–æ–¥–∞: $code");
                    return;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            $unique = array_unique($codes);
            if (count($unique) !== count($codes)) {
                $this->fail("Recovery codes uniqueness", "Recovery –∫–æ–¥—ã –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã");
                return;
            }
            
            $this->pass("Recovery code generation", "Recovery –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("Recovery code generation", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testRecoveryCodeVerification(): void
    {
        try {
            $recoveryManager = new RecoveryManager($this->db);
            $testUserId = 'test-verify-user';
            
            $codes = $recoveryManager->generateRecoveryCodes($testUserId, 3);
            $testCode = $codes[0];
            
            // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–¥–∞
            if (!$recoveryManager->verifyRecoveryCode($testUserId, $testCode)) {
                $this->fail("Recovery code verification valid", "–í–∞–ª–∏–¥–Ω—ã–π recovery –∫–æ–¥ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É");
                return;
            }
            
            // –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–≥–æ –∂–µ –∫–æ–¥–∞
            if ($recoveryManager->verifyRecoveryCode($testUserId, $testCode)) {
                $this->fail("Recovery code reuse", "Recovery –∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ");
                return;
            }
            
            // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–¥–∞
            if ($recoveryManager->verifyRecoveryCode($testUserId, 'FAKE-CODE')) {
                $this->fail("Recovery code verification invalid", "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π recovery –∫–æ–¥ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É");
                return;
            }
            
            $this->pass("Recovery code verification", "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è recovery –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("Recovery code verification", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testEmergencyTokens(): void
    {
        try {
            $recoveryManager = new RecoveryManager($this->db);
            $testUserId = 'test-emergency-user';
            $testEmail = 'test@example.com';
            
            $token = $recoveryManager->createEmergencyToken($testUserId, $testEmail);
            
            if (empty($token)) {
                $this->fail("Emergency token creation", "Emergency token –Ω–µ —Å–æ–∑–¥–∞–Ω");
                return;
            }
            
            if (strlen($token) < 32) {
                $this->fail("Emergency token length", "Emergency token —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π");
                return;
            }
            
            // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            $verifiedUserId = $recoveryManager->verifyEmergencyToken($token);
            if ($verifiedUserId !== $testUserId) {
                $this->fail("Emergency token verification", "Emergency token –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è");
                return;
            }
            
            // –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            $verifiedAgain = $recoveryManager->verifyEmergencyToken($token);
            if ($verifiedAgain !== null) {
                $this->fail("Emergency token reuse", "Emergency token –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ");
                return;
            }
            
            $this->pass("Emergency tokens", "Emergency tokens —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("Emergency tokens", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testSecurityHeaders(): void
    {
        try {
            // –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ headers (—Å–∏–º—É–ª—è—Ü–∏—è)
            ob_start();
            SecurityHeaders::setSecurityHeaders();
            ob_end_clean();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º headers —á–µ—Ä–µ–∑ headers_list() –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (function_exists('headers_list')) {
                $headers = headers_list();
            } else {
                $headers = [];
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            $requiredHeaders = [
                'Content-Security-Policy',
                'X-Frame-Options',
                'X-Content-Type-Options'
            ];
            
            $foundHeaders = [];
            foreach ($headers as $header) {
                foreach ($requiredHeaders as $required) {
                    if (strpos($header, $required) !== false) {
                        $foundHeaders[] = $required;
                    }
                }
            }
            
            if (count($foundHeaders) >= 2) { // –•–æ—Ç—è –±—ã 2 –∏–∑ 3 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                $this->pass("Security headers", "Security headers —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è");
            } else {
                $this->skip("Security headers", "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å headers –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏");
            }
            
        } catch (Exception $e) {
            $this->skip("Security headers", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ headers: " . $e->getMessage());
        }
    }
    
    private function testHTTPSEnforcement(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º development —Ä–µ–∂–∏–º
            $isDevelopment = ($_ENV['APP_ENV'] ?? 'production') === 'development';
            $httpsRequired = $_ENV['HTTPS_ENFORCEMENT'] ?? 'true';
            
            if ($isDevelopment && $httpsRequired === 'false') {
                // –í development —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º HTTPS - —Ä–∞–∑—Ä–µ—à–∞–µ–º HTTP
                $_SERVER['HTTPS'] = 'off';
                $_SERVER['HTTP_HOST'] = 'localhost:8080';
                
                $result = SecurityHeaders::enforceHTTPS();
                
                if ($result === false) {
                    $this->fail("HTTPS enforcement", "Development —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∞—Ç—å HTTP");
                    return;
                }
                
                $this->pass("HTTPS enforcement", "Development —Ä–µ–∂–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç HTTP");
                return;
            }
            
            // –û–±—ã—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è production
            // –°–∏–º—É–ª—è—Ü–∏—è HTTP –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ–º–µ–Ω–∞
            $_SERVER['HTTPS'] = 'off';
            $_SERVER['HTTP_HOST'] = 'external.com';
            
            ob_start();
            $result = SecurityHeaders::enforceHTTPS();
            ob_end_clean();
            
            if ($result === true) {
                $this->fail("HTTPS enforcement", "HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ–º–µ–Ω–∞");
                return;
            }
            
            // –°–∏–º—É–ª—è—Ü–∏—è localhost (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏)
            $_SERVER['HTTP_HOST'] = 'localhost';
            $result = SecurityHeaders::enforceHTTPS();
            
            if ($result === false) {
                $this->fail("HTTPS enforcement localhost", "localhost –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ HTTP");
                return;
            }
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º Tuna URL (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏)
            $_SERVER['HTTP_HOST'] = 'test.tuna.am';
            $result = SecurityHeaders::enforceHTTPS();
            
            if ($result === false) {
                $this->fail("HTTPS enforcement tuna", "Tuna URL –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ HTTP");
                return;
            }
            
            $this->pass("HTTPS enforcement", "HTTPS enforcement —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("HTTPS enforcement", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testSecurityIntegration(): void
    {
        try {
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å security –º–µ—Ä–∞–º–∏
            $rateLimiter = new RateLimiter($this->db);
            $recoveryManager = new RecoveryManager($this->db);
            
            // –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –∞—Ç–∞–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º action
            $integrationAction = 'integration-test-' . time();
            $attempts = 0;
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º brute force –∞—Ç–∞–∫—É
            for ($i = 0; $i < 10; $i++) {
                if ($rateLimiter->checkIPLimit($integrationAction, 5, 5)) {
                    $attempts++;
                } else {
                    break;
                }
            }
            
            if ($attempts >= 10) {
                $this->fail("Security integration", "Rate limiting –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª brute force");
                return;
            }
            
            if ($attempts < 5) {
                $this->fail("Security integration", "Rate limiting —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–µ–Ω");
                return;
            }
            
            $this->pass("Security integration", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è security –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception $e) {
            $this->fail("Security integration", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testAttackScenarios(): void
    {
        try {
            // –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç timing attacks
            $start1 = microtime(true);
            WebAuthnSecurity::validateChallenge('valid', 'valid');
            $time1 = microtime(true) - $start1;
            
            $start2 = microtime(true);
            WebAuthnSecurity::validateChallenge('invalid', 'valid');
            $time2 = microtime(true) - $start2;
            
            // –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 100%)
            $timeDiff = abs($time1 - $time2) / max($time1, $time2);
            if ($timeDiff > 1.0) {
                $this->fail("Timing attack protection", "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
                return;
            }
            
            $this->pass("Attack scenarios", "–ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç");
            
        } catch (Exception $e) {
            $this->fail("Attack scenarios", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function pass(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'PASS',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚úÖ {$testName}: {$message}\n";
    }
    
    private function fail(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'FAIL',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚ùå {$testName}: {$message}\n";
    }
    
    private function skip(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'SKIP',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚è≠Ô∏è  {$testName}: {$message}\n";
    }
    
    private function printResults(): void
    {
        $passed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'PASS'));
        $failed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'FAIL'));
        $skipped = count(array_filter($this->testResults, fn($r) => $r['status'] === 'SKIP'));
        $total = count($this->testResults);
        
        echo "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n";
        echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {$passed}\n";
        echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$failed}\n";
        echo "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {$skipped}\n";
        echo "üìù –í—Å–µ–≥–æ: {$total}\n";
        
        if ($failed > 0) {
            echo "\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –û–ë–ù–ê–†–£–ñ–ï–ù–´!\n";
            echo "–ù–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–π—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫.\n";
            exit(1);
        } else {
            echo "\nüõ°Ô∏è –í–°–ï –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!\n";
            echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n";
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
new SecurityTest();
