<?php
/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ Database
 * –ü—Ä–æ–≤–µ—Ä—è—é—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –ë–î
 */

require_once __DIR__ . '/../src/Database.php';

use WebAuthn\Database;

class DatabaseTest
{
    private Database $db;
    private array $testResults = [];
    
    public function __construct()
    {
        echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Database –∫–ª–∞—Å—Å–∞...\n\n";
        
        try {
            $this->db = new Database();
        } catch (Exception $e) {
            $this->fail("Database connection", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: " . $e->getMessage());
            return;
        }
        
        $this->runAllTests();
        $this->printResults();
    }
    
    private function runAllTests(): void
    {
        $this->testConnection();
        $this->testCreateUser();
        $this->testGetUser();
        $this->testGetNonExistentUser();
        $this->testCreateDuplicateUser();
        $this->testSaveCredential();
        $this->testGetCredential();
        $this->testCreateSession();
        $this->testGetValidSession();
        $this->testGetExpiredSession();
        $this->testCleanupExpiredSessions();
    }
    
    private function testConnection(): void
    {
        try {
            $pdo = $this->db->getPdo();
            $stmt = $pdo->query("SELECT 1");
            $result = $stmt->fetch();
            
            if ($result) {
                $this->pass("Database connection", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç");
            } else {
                $this->fail("Database connection", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å");
            }
        } catch (Exception $e) {
            $this->fail("Database connection", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " . $e->getMessage());
        }
    }
    
    private function testCreateUser(): void
    {
        $testUserId = 'test_user_' . time() . '_' . rand(1000, 9999);
        $testUserHandle = random_bytes(32);
        
        try {
            $result = $this->db->createUser($testUserId, $testUserHandle);
            
            if ($result) {
                $this->pass("Create user", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
                $this->testUserId = $testUserId;
                $this->testUserHandle = $testUserHandle;
            } else {
                $this->fail("Create user", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
        } catch (Exception $e) {
            $this->fail("Create user", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " . $e->getMessage());
        }
    }
    
    private function testGetUser(): void
    {
        if (!isset($this->testUserId)) {
            $this->skip("Get user", "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }
        
        try {
            $user = $this->db->getUser($this->testUserId);
            
            if ($user && $user['user_id'] === $this->testUserId) {
                $this->pass("Get user", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            } else {
                $this->fail("Get user", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã");
            }
        } catch (Exception $e) {
            $this->fail("Get user", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " . $e->getMessage());
        }
    }
    
    private function testGetNonExistentUser(): void
    {
        $fakeUserId = 'nonexistent_user_12345';
        
        try {
            $user = $this->db->getUser($fakeUserId);
            
            if ($user === null) {
                $this->pass("Get non-existent user", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            } else {
                $this->fail("Get non-existent user", "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
        } catch (Exception $e) {
            $this->fail("Get non-existent user", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testCreateDuplicateUser(): void
    {
        if (!isset($this->testUserId)) {
            $this->skip("Create duplicate user", "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }
        
        try {
            $result = $this->db->createUser($this->testUserId, $this->testUserHandle);
            
            if ($result === false) {
                $this->pass("Create duplicate user", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            } else {
                $this->fail("Create duplicate user", "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞");
            }
        } catch (Exception $e) {
            // PDO exception –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏ UNIQUE constraint
            $this->pass("Create duplicate user", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏");
        }
    }
    
    private function testSaveCredential(): void
    {
        if (!isset($this->testUserId)) {
            $this->skip("Save credential", "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }
        
        $testCredentialId = 'test_credential_' . time() . '_' . rand(1000, 9999);
        $testPublicKey = 'test_public_key_data';
        
        try {
            $result = $this->db->saveCredential($this->testUserId, $testCredentialId, $testPublicKey);
            
            if ($result) {
                $this->pass("Save credential", "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
                $this->testCredentialId = $testCredentialId;
            } else {
                $this->fail("Save credential", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
            }
        } catch (Exception $e) {
            $this->fail("Save credential", "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
        }
    }
    
    private function testGetCredential(): void
    {
        if (!isset($this->testCredentialId)) {
            $this->skip("Get credential", "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
            return;
        }
        
        try {
            $credential = $this->db->getCredential($this->testCredentialId);
            
            if ($credential && $credential['credential_id'] === $this->testCredentialId) {
                $this->pass("Get credential", "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            } else {
                $this->fail("Get credential", "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã");
            }
        } catch (Exception $e) {
            $this->fail("Get credential", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
        }
    }
    
    private function testCreateSession(): void
    {
        if (!isset($this->testUserId)) {
            $this->skip("Create session", "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }
        
        $testSessionId = 'test_session_' . time() . '_' . rand(1000, 9999);
        
        try {
            $result = $this->db->createSession($testSessionId, $this->testUserId, 3600);
            
            if ($result) {
                $this->pass("Create session", "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                $this->testSessionId = $testSessionId;
            } else {
                $this->fail("Create session", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é");
            }
        } catch (Exception $e) {
            $this->fail("Create session", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: " . $e->getMessage());
        }
    }
    
    private function testGetValidSession(): void
    {
        if (!isset($this->testSessionId)) {
            $this->skip("Get valid session", "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏");
            return;
        }
        
        try {
            $session = $this->db->getSession($this->testSessionId);
            
            if ($session && $session['session_id'] === $this->testSessionId) {
                $this->pass("Get valid session", "–î–µ–π—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            } else {
                $this->fail("Get valid session", "–î–µ–π—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            }
        } catch (Exception $e) {
            $this->fail("Get valid session", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: " . $e->getMessage());
        }
    }
    
    private function testGetExpiredSession(): void
    {
        // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–µ–∫—à—É—é —Å–µ—Å—Å–∏—é
        $expiredSessionId = 'expired_session_' . time() . '_' . rand(1000, 9999);
        
        if (!isset($this->testUserId)) {
            $this->skip("Get expired session", "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }
        
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è = –∏—Å—Ç–µ–∫—à–∞—è)
            $this->db->createSession($expiredSessionId, $this->testUserId, -3600);
            
            $session = $this->db->getSession($expiredSessionId);
            
            if ($session === null) {
                $this->pass("Get expired session", "–ò—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è");
            } else {
                $this->fail("Get expired session", "–ò—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è");
            }
        } catch (Exception $e) {
            $this->fail("Get expired session", "–û—à–∏–±–∫–∞: " . $e->getMessage());
        }
    }
    
    private function testCleanupExpiredSessions(): void
    {
        try {
            $deletedCount = $this->db->cleanExpiredSessions();
            
            if ($deletedCount >= 0) { // –ú–æ–∂–µ—Ç –±—ã—Ç—å 0, –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
                $this->pass("Cleanup expired sessions", "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (—É–¥–∞–ª–µ–Ω–æ: $deletedCount)");
            } else {
                $this->fail("Cleanup expired sessions", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏");
            }
        } catch (Exception $e) {
            $this->fail("Cleanup expired sessions", "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: " . $e->getMessage());
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        $this->cleanup();
    }
    
    private function cleanup(): void
    {
        try {
            $pdo = $this->db->getPdo();
            
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (isset($this->testUserId)) {
                $stmt = $pdo->prepare("DELETE FROM users WHERE user_id = ?");
                $stmt->execute([$this->testUserId]);
            }
            
            if (isset($this->testSessionId)) {
                $stmt = $pdo->prepare("DELETE FROM user_sessions WHERE session_id = ?");
                $stmt->execute([$this->testSessionId]);
            }
            
        } catch (Exception $e) {
            echo "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "\n";
        }
    }
    
    private function pass(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'PASS',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚úÖ {$testName}: {$message}\n";
    }
    
    private function fail(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'FAIL',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚ùå {$testName}: {$message}\n";
    }
    
    private function skip(string $testName, string $message): void
    {
        $this->testResults[] = [
            'status' => 'SKIP',
            'test' => $testName,
            'message' => $message
        ];
        echo "‚è≠Ô∏è  {$testName}: {$message}\n";
    }
    
    private function printResults(): void
    {
        $passed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'PASS'));
        $failed = count(array_filter($this->testResults, fn($r) => $r['status'] === 'FAIL'));
        $skipped = count(array_filter($this->testResults, fn($r) => $r['status'] === 'SKIP'));
        $total = count($this->testResults);
        
        echo "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Database:\n";
        echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {$passed}\n";
        echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$failed}\n";
        echo "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {$skipped}\n";
        echo "üìù –í—Å–µ–≥–æ: {$total}\n";
        
        if ($failed > 0) {
            echo "\n‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´! –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ.\n";
            exit(1);
        } else {
            echo "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n";
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
new DatabaseTest();
